#! /usr/bin/env python

from pydrive.drive import GoogleDrive
from pydrive.auth import GoogleAuth
from optparse import OptionParser
import sys

class GDriveCIUpdater:

    def __init__(self, filename, project_name):

        reload(sys)
        sys.setdefaultencoding('utf8')

        self.gauth = GoogleAuth()
        self.gauth.CommandLineAuth()    # get authenticated

        self.drive = self._drive()

        self.filename = filename
        self.gdrive_filename = "%s.html" % project_name

        self.update_file = False    # a flag to decide if we need to retrieve an existing file or update a new one
        self.file_id = None

        self.file_list = self._get_file_list()  # all of the users existing GDrive files
        self._check_for_file_update()

    def _get_file_list(self):
        # this returns a list of tuples in 'title,id' format
        # it can be used to compare filenames and retrieve the existing file if it's a match

        try:
            data = list()
            raw = self.drive.ListFile({}).GetList()
            for i in raw:
                data.append((i['title'], i['id']))

            return data

        except Exception, e:
            raise e

    def _check_for_file_update(self):
        # this will look to see if the desired filename already exists or not
        
        for i in self.file_list:
            if i[0] == self.gdrive_filename:    # the file already exists

                self.update_file = True
                self.file_id = i[1]

    def _drive(self):

        try:
            d = GoogleDrive(self.gauth) # Create GoogleDrive instance with authenticated GoogleAuth instance

            return d

        except Exception, e:
            raise e

    def _get_file(self):
        # this will retrieve an existing file with the right file ID so we can update instead of uploading a copy
        # it is called if self.update_file = True
        
        try:
            if self.update_file:
                f = self.drive.CreateFile({'id': self.file_id})
            else:
                f = self.drive.CreateFile({'title': self.gdrive_filename})

            return f
        except Exception, e:
            raise e

    def upload_file(self):

        gfile = self._get_file()    # we decide if it's a new file or updating an existing one    
        gfile.SetContentFile(self.filename)

        gfile.Upload() # Upload it

        return gfile['id']

def main():

    parser = OptionParser(usage="%prog ", version="%prog 0.1")
    parser.add_option("-f", "--file", dest="filename", help="The filename you want added to GDrive", metavar="FILENAME")
    parser.add_option("-g", "--gdrive_project", dest="project_name", help="The Google Drive name you want the file to have", metavar="PROJECT_NAME")

    (options, args) = parser.parse_args()
    if options.filename is None:
        parser.print_help()
        sys.exit(1)
    if options.project_name is None:
        parser.print_help()
        sys.exit(1)

    gdrive = GDriveCIUpdater(options.filename, options.project_name)
    retval = gdrive.upload_file()

    print retval

if __name__ == '__main__':
    main()
